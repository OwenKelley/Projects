  
  #include<iostream>
  #include"counterType.h"
  using namespace std;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// initializeCounter sets the counter value to 0 
  void counterType::initializeCounter()
  {
   counter = 0;
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// setCounter sets the counter to the given variable (if none, default 0)
  void counterType::setCounter(int x)
  {
   if(x < 0)
   {
    counter = 0;
   }
   else 
   {
    counter = x;
   }
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// getCounter
  int counterType::getCounter() const
  {
   return counter;
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// incrementCounter increments counter by 1
  void counterType::incrementCounter()
  {
   counter = counter + 1;
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// decrementCounter decreases counter by 1
  void counterType::decrementCounter()
  {
   counter = counter - 1;
   if(counter < 0)
   {
    counter = 0;
   }
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// displayCounter outputs the current counter value
  void counterType::displayCounter() const
  {
   cout << counter;
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// counterType checks to see if counter is a valid number
  counterType::counterType(int x)
  {
   if(x < 0)
   {
    counter = 0;
   }    
   else 
   {
    counter = x;
   }
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// counterType cleans the counter before program starts
  counterType::counterType()
  {
   counter = 0;
  }
